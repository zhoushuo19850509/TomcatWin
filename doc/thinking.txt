胡思乱想一下
--有想法是好的，但是好的想法根植于大量常识的积累


1.新版本Tomcat
如果能够坚持读完本书并完成实践
应该能够对tomcat4/5版本有一个系统的了解。
后续可以尝试阅读最新版本的Tomcat
掌握最新的技术

2.尝试贡献社区
Apache Tomcat社区是鼓励你对社区做贡献的。

3.尝试拿自己开发的tomcat和(老版本的)tomcat做一下性能对比。
比如在10并发的客户请求下，servlet处理效率能够达到官方tomcat百分之多少。
并且尝试提升性能，提升安全性。
这样自研的tomcat才有落地的必要性：
即虽然从全功能上，自研的tomcat不可能达到官方tomcat的能力。
但是在某项性能上，比如并发处理性能/或者数据库连接能力上，尝试接近官方工具，甚至有一些特色功能。

4.尝试对官方tomcat进行深度定制
随着微服务，容器化的发展，JAVA容器也向着小型化/轻量化的方向发展
一旦现有的Tomcat无法满足我们本地化的需求，就有必要对现有的Tomcat进行深度定制。
要实现深度定制，那么必然要了解Tomcat的原理，同时，要学会如何编译Tomcat源码

5.Tomcat各个版本比对
尝试在Tomcat4的版本基础上，比较一下各个版本Tomcat的不同，主要是学习Tomcat的发展演进经过
我们只要看一下各个版本的release-note就行了，单从tomcat引用的jar包就能看到新增了很多功能。

另外，可以尝试从一个比较小的点入手，比如线程池管理，从Tomcat4开始的自己管理(stack)，后续不断升级，应该是会引入第三方线程池管理工具。

可以通过BeyondCompare进行各个版本的比较

6.专业的事情交给专业的组件去做。
比如tomcat-dbcp.jar 这个之前我们研究很多了。
数据库连接池的功能交给dbcp来做，虽然dbcp老版本有一些BUG，但是他也是在不断演进的，
而且在数据库连接池技术上，肯定是要比tomcat自己开发要专业得多。
后续，我们要继续研究一下其他组件，
比如tomcat-websock.jar是怎么回事，tomcat-coyote.jar是怎么回事，等等。
研究这些组件后续是否能够应用到我们日常工作中去。

7.关于池管理
我们都知道，Tomcat为了支持并发访问，维护了一个类似WebContainer的线程池。
这个池是怎么管理的呢？是用apache commons pools进行管理吗？
老版本的可能还是自己在管理WebContainer，新版本的我想肯定是交给更加专业的池管理组件了吧。

8.我们看到Tomcat一直是不断在演进，在升级的
那么对于我们自己负责的系统，是否有什么启示呢？
增加新功能/替换过时的组件/不断提升性能/提升稳定性

9.了解网络七层架构中，应用层的协议是如何实现的
能够了解应用层的协议，比如HTTP1.1，是如何实现的。
比如http1.1的persistent connections机制，是如何实现的？
后续通过学习更高版本的tomcat，可以了解HTTP2的实现原理

10.了解大型软件系统的设计思路
学习大型软件，如何通过OO的思想，将复杂的功能，以对象的形式进行整合。
对于Tomcat来说，最典型的就是Container的整体架构

11.Tomcat规模适中
我们知道，Tomcat是大型的应用软件，但是规模适中。
很快就能开发出一个tomcat原型来(其实Chap3已经是一个Tomcat的雏形了，能够处理Servlet了)
相较其他开源软件，可以说是入门相对容易的了
(画外音：你开发一个Linux原型/或者Nginx原型给我看看)
因此，我觉得拿Tomcat作为开源软件的学习目标，是比较合适的。
《How Tomcat works》这本书也是这样的思想，由浅入深。
